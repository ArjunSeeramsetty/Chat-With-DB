name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        test-type: [unit, integration, e2e]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
    
    - name: Create test database
      run: |
        # Create a test database for testing
        mkdir -p test_data
        touch test_data/test.db
    
    - name: Set environment variables
      run: |
        echo "DATABASE_PATH=test_data/test.db" >> $GITHUB_ENV
        echo "LLM_PROVIDER_TYPE=ollama" >> $GITHUB_ENV
        echo "LLM_API_KEY=test_key" >> $GITHUB_ENV
        echo "LLM_MODEL=llama3.2:3b" >> $GITHUB_ENV
    
    - name: Run ${{ matrix.test-type }} tests
      run: |
        if [ "${{ matrix.test-type }}" = "unit" ]; then
          pytest tests/unit/ -v --cov=backend --cov-report=xml --cov-report=html
        elif [ "${{ matrix.test-type }}" = "integration" ]; then
          pytest tests/integration/ -v --cov=backend --cov-report=xml --cov-report=html
        else
          pytest tests/e2e/ -v --cov=backend --cov-report=xml --cov-report=html
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-type }}
        name: ${{ matrix.test-type }}-coverage
        fail_ci_if_error: false

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy
    
    - name: Run linting
      run: |
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting
      run: |
        black --check backend/
        isort --check-only backend/
    
    - name: Run type checking
      run: |
        mypy backend/ --ignore-missing-imports

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Create test database
      run: |
        mkdir -p test_data
        touch test_data/test.db
    
    - name: Set environment variables
      run: |
        echo "DATABASE_PATH=test_data/test.db" >> $GITHUB_ENV
        echo "LLM_PROVIDER_TYPE=ollama" >> $GITHUB_ENV
        echo "LLM_API_KEY=test_key" >> $GITHUB_ENV
        echo "LLM_MODEL=llama3.2:3b" >> $GITHUB_ENV
    
    - name: Run performance tests
      run: |
        pytest tests/ -m performance -v --benchmark-only
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: .pytest_cache/

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/

  deploy:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Deploy to test environment
      run: |
        echo "Deploying to test environment..."
        # Add deployment steps here
        # For example: docker build, docker push, etc.
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test steps here 